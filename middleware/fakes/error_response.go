// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"
)

type ErrorResponse struct {
	NotAcceptableStub        func(http.ResponseWriter, error, string, string)
	notAcceptableMutex       sync.RWMutex
	notAcceptableArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 error
		arg3 string
		arg4 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ErrorResponse) NotAcceptable(arg1 http.ResponseWriter, arg2 error, arg3 string, arg4 string) {
	fake.notAcceptableMutex.Lock()
	fake.notAcceptableArgsForCall = append(fake.notAcceptableArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 error
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("NotAcceptable", []interface{}{arg1, arg2, arg3, arg4})
	fake.notAcceptableMutex.Unlock()
	if fake.NotAcceptableStub != nil {
		fake.NotAcceptableStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *ErrorResponse) NotAcceptableCallCount() int {
	fake.notAcceptableMutex.RLock()
	defer fake.notAcceptableMutex.RUnlock()
	return len(fake.notAcceptableArgsForCall)
}

func (fake *ErrorResponse) NotAcceptableArgsForCall(i int) (http.ResponseWriter, error, string, string) {
	fake.notAcceptableMutex.RLock()
	defer fake.notAcceptableMutex.RUnlock()
	return fake.notAcceptableArgsForCall[i].arg1, fake.notAcceptableArgsForCall[i].arg2, fake.notAcceptableArgsForCall[i].arg3, fake.notAcceptableArgsForCall[i].arg4
}

func (fake *ErrorResponse) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.notAcceptableMutex.RLock()
	defer fake.notAcceptableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ErrorResponse) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
